Aplicación Completa 



NODE: 

1º) Creamos las carpetas: 
	
- travels: 
	- client
	- server

2º) 

- entramos en el cmd 

- y nos vamos con cd a C:\Users\Juanjo\Desktop\Bootcamp Voodoo Code\Clases_Santi\react\travels\server> 

- y escribimos: express --view=pug


3º) 

- vamos a la carpeta server -> y luego al package.json y borramos: "pug": "2.0.0-beta11"

- en el terminal de server: npm i

- nos vamos al app.js y comentamos estas 2 líneas porque no vamos a generar vistas: 

	// app.set('views', path.join(__dirname, 'views'));
	// app.set('view engine', 'pug');

- eliminamos carpeta stylesheets y la de javascript


4º) 

- no vamos a usar vistas y por tanto, eliminamos la carpeta views

- nos vamos al package.json y ponemos en la terminal: npm i nodemon

-  escribimos el "dev": "nodemon ./bin/www", (no olvidar la coma en start) 

- en el archivo www reescribimos la líne 28: 

	server.listen(port, ()=> {console.log("servidor corriendo por el puerto " + port)});

- en el archivo index.js reescribimos la línea 6: 

	  res.send("hola");

- npm run dev (aunque nos dará un error de que no hay vistas) 


5º) 

- nos vamos a MySQL para prepararlo

- guardamos el archivo dentro de la carpeta travels

- instalamos dentro de la carpeta server: npm i mysql2

- instalamos también: npm i cors

- instalamos también: npm i bcrypt

- instalamos también: npm i jsonwebtoken

- instalamos también: npm i multer

6º) 

- instalamos: npm i dotenv 

- creamos el archivo .env dentro de la carpeta server y lo rellenamos  

- en el archivo www escribimos en la línea 12: require('dotenv').config(); 

- nos vamos en la terminal a la carpeta travels y ponemos: git init 

- creamos el archivo .gitignore dentro de la carpeta server e introducimos: 

	node_modules
	.env 

- para ver las variables de entorno de mi pc, escribimos en www en la línea 14: 

	// para ver las variables de entorno de mi pc
	// console.log(process.env)


7º) 

- creamos la carpeta config dentro de la carpeta server 

- creamos el archivo db.js dentro de la carpeta config y rellenamos el archivo para 
  llevar a cabo la configuración de la conexión con la base de datos


8º) 

- creamos la carpeta controllers dentro de la carpeta server 

- creamos el archivo usersControllers.js dentro de la carpeta controllers y se ha hecho 
  una ruta de prueba que no sirve.

- nos cargamos el archivo index.js y el indexRouter en app.js (son dos líneas separadas) 




REACT: 

9º) 

- nos cargamos la carpeta client

- en el terminal entramos en travels

- ponemos: npm create vite@latest 

- en project name ponemos: travels

- Elegimos React y JavaScript 

- nos vamos en la terminal a client

- ponemos: npm i (para instalar las dependencias)

- ponemos: npm i sass (instalamos sass)

- ponemos: npm i bootstrap react-bootstrap bootstrap (instalamos bootstrap y react-bootstrap) 

- ponemos: npm i react-router-dom (permite definir rutas y componentes)

- ponemos: npm i axios (para llamar a apis, y la utilizaremos para llamar a nuestro server) 

- ponemos: npm i jwt-decode (para decodificar el token cuando abramos la página si tenemos el login   	   metido) 

- ponemos: npm run dev


10º) 

- borramos todo del index.css y App.css 

- en App.jsx borramos todo el return, solo queda el fragment e introducimos un h1 con un "hola"
  y el enlace import 'bootstrap/dist/css/bootstrap.min.css'; para que tenga los estilos de 
  bootstrap


11º) 

- creamos la carpeta pages y las diferentes carpetas dentro de esta las cuales son: 

pages: 
	
	admin
	
	auth 

	dashboard
	
		errorPage -> ErrorPage.jsx
			
		home -> Home.jsx

	travels 

	users

	
- introducimos las rutas, creando una carpeta Routes dentro de src, y dentro de Routes creamos 
  el componente AppRoutes.jsx, dentro del archivo escribimos todas las rutas. 
  Y en App.jsx escribimos dentro del fragment solamente el componente AppRoutes, este está contenido 
  en un container fluid, y en AppRoutes esta contenido en BrowserRoutes, luego en Row y ya depende 
  del archivo se pone col o no. 

12º) 

- Hacemos el NavBarApp.jsx con su archivo NavBarApp.scss con la col 0

- Hacemos el Register.jsx con su front y su handleChange y por último su handleSubmit con axios
  para poder enviar los datos al back

- Nos vamos al back estando el axios relleno y hacemos la ruta post en este caso de createUser:

	- 1º.- Abrimos la terminal de node y la ejecutamos, la de react ya estaba abierta y ejecutada
	- 2º.- Crear un console.log del req.body
	- 3º.- instalación de la librería cors para que no nos de errores para enviar peticiones entre 
	       el front y el back, es un middleweare
	- 4º.- en app.jsx metemos las cosas del cors y comprobamos que recibimos el req.body en la consola del server


Ver video 3 register travels 
